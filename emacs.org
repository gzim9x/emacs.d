* speed-up

#+name: speed-up
#+begin_src emacs-lisp
(add-hook 'after-init-hook (lambda ()
                             ;; recover garbage collector
                             (setq gc-cons-threshold #x1000000))) ; 16Mb

;; Increase how much is read from processes in a single chunk (default is 4kb)
(setq read-process-output-max #x10000)  ; 64kb

;; Don't ping things that look like domain names.
(setq ffap-machine-p-known 'reject)
#+end_src

* package

#+name: package
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(;; MELPA Stable (Milkypostman’s Emacs Lisp Package Archive)
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ;; GNU Emacs Lisp Package Archive
                         ("gnu" . "http://elpa.gnu.org/packages/")
			   ;; NonGNU Emacs Lisp Package Archive
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ;; Org mode
                         ("org" . "https://orgmode.org/elpa/")))

;; Make the packages available to the current session.
(package-initialize)
#+end_src

* modules
** Block 1 - main view & preferences for it
*** use-package

[[https://github.com/jwiegley/use-package][https://github.com/jwiegley/use-package]]

The use-package macro allows to isolate package configuration in .emacs file in a way that is both
performance-oriented and, well, tidy.

#+name: use-package
#+begin_src emacs-lisp
;; install use-package if not exits
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

;; Package 'bind-key' provides a macro by the same name (along with
;; 'bind-key*' and 'unbind-key') which provides a much prettier API
;; for manipulating keymaps than 'define-key' and 'global-set-key' do.
;; It's also the same API that ':bind' and similar keywords in
;; 'use-package' use.
(require 'bind-key)

;; The :ensure keyword causes the package(s) to be installed automatically if not
;; already present on your system. Enable use-package-always-ensure if you wish this
;; behavior to be global for all packages:

(require 'use-package-ensure)
(setq use-package-always-ensure t)

;; When a package is loaded, and if you have use-package-verbose set to t, or if
;; the package takes longer than 0.1s to load, you will see a message to indicate
;; this loading activity in the *Messages* buffer. The same will happen for
;; configuration, or :config blocks that take longer than 0.1s to execute.
;; In general, you should keep :init forms as simple and quick as possible, and
;; put as much as you can get away with into the :config block.
;; This way, deferred loading can help your Emacs to start as quickly as possible.
(setq use-package-verbose t)

(setq use-package-compute-statistics t)

(setq use-package-minimum-reported-time 0)
#+end_src

*** doom-themes

https://github.com/hlissner/emacs-doom-themes

A theme megapack for GNU Emacs, inspired by community favorites.
Special attention is given for Doom Emacs and solaire-mode support,
but will work fine anywhere else.

#+name: doom-themes
#+begin_src emacs-lisp
(use-package doom-themes
  :custom
  (doom-themes-enable-bold nil) ; if nil, bold is universally disabled
  (doom-themes-enable-italic nil) ; if nil, italics is universally disabled
  (doom-themes-treemacs-theme "doom-colors")

  :config
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Foreground colors
  (setq fg-colors ["wheat2"
                   "white"
                   "MediumOrchid2"
                   "#5c6380"
                   "wheat1"
                   "DarkOliveGreen2"
                   "PeachPuff2"
                   "DarkSeaGreen2"
                   "DarkSlateGray2"])

  ;; Background colors
  (setq bg-colors ["#222131"
                   "grey12"
                   "#21242e"
                   "black"
                   "#071020"
                   "grey20"
                   "#231c30"])

  ;; Fonts
  (setq fonts ["JetBrains Mono"
               "Monitorica"
               "Aldrich [RUS by Daymarius]"
               "Gardens CM"
               "Jet Set"
               "arial curive"
               "Hack"
               "Azbuka04"
               "Comic Helvetic"
               "Oxygen"
               "Product Sans(RUS BY LYAJKA)"
               "Ropa Sans [RUS by Daymarius]"
               "Trebuchet"
               "Arial"
               "Verdana"
               "Tahoma"
               "Monaco"
               "PT Mono"]))
#+end_src

*** customize

This stops emacs adding customised settings to init.el.

#+name: customize
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/customize.el")
(when (file-readable-p custom-file)
    (load custom-file))
#+end_src

*** ui-settings

#+name: ui-settings
#+begin_src emacs-lisp
(add-hook 'after-init-hook
          (lambda ()
            ;; Set default font
            (set-frame-font "JetBrains Mono 12" nil t)

            ;; Skip startup screen
            (setq inhibit-startup-screen t)

            ;; Start with a blank canvas
            (setq initial-scratch-message "")

            ;; Disable horizontal scrollbar
            (horizontal-scroll-bar-mode -1)

            ;; Displays column number in the mode line
            (setq column-number-mode t)

            ;; Disable cursor blink
            (blink-cursor-mode -1)

            (setq use-dialog-box nil)

            ;; (setq menu-bar-mode t)
            ))
#+end_src

*** doom-modeline

https://github.com/seagle0128/doom-modeline

A fancy and fast mode-line inspired by minimalism design.
It's integrated into Centaur Emacs, Doom Emacs and Spacemacs.

#+name: doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode))
#+end_src

*** menu

#+name: menu
#+begin_src emacs-lisp
(load-file "~/.emacs.d/menu.el")
#+end_src

*** private

#+name: private
#+begin_src emacs-lisp
(load-file "~/.emacs.d/private.el")
#+end_src

*** settings

#+name: settings
#+begin_src emacs-lisp
(setenv "PATH" my-env-path)
(setenv "MANPATH" my-env-manpath)

(add-hook 'after-init-hook
          (lambda ()

            ;; Don't use tabs for indentation. Use only spaces.
            (setq-default indent-tabs-mode nil)

            ;; Don't make backup files
            (setq make-backup-files nil)

            ;; Don't make autosave files
            (setq auto-save-default nil)

            ;; Don't make lockfiles
            (setq create-lockfiles nil)

            (setq auto-save-list-file-name nil)

            ;; Dired
            ;; on macOS, ls doesn't support the --dired option while on Linux it is supported.
            (when (string= system-type "darwin")
              (setq dired-use-ls-dired nil))
            (setq dired-recursive-deletes 'always)
            (setq dired-recursive-copies 'always)


            ;; Winner Mode is a global minor mode.
            ;; When activated, it allows you to “undo” (and “redo”) changes
            ;; in the window configuration with the key commands ‘C-c left’ and ‘C-c right’.
            (when (fboundp 'winner-mode)
              (winner-mode 1))

            (bind-key "M-SPC" 'cycle-spacing)

            (bind-key "M-/" 'hippie-expand)

            (bind-key "C-x C-b" 'ibuffer)

            ;; "y" is shorter than "yes"
            (defalias 'yes-or-no-p 'y-or-n-p)

            ;; auto-revert-mode
            (add-hook 'prog-mode-hook 'auto-revert-mode)
            (add-hook 'text-mode-hook 'auto-revert-mode)

            ;; I never want whitespace at the end of lines. Remove it on save.
            (add-hook 'before-save-hook 'delete-trailing-whitespace)

            ;; Kill process buffer without confirmation
            (setq kill-buffer-query-functions nil)))

;; disable eldoc globally
(global-eldoc-mode -1)

(desktop-save-mode 1)
#+end_src

*** registers

#+name: registers
#+begin_src emacs-lisp
(load-file "~/.emacs.d/registers.el")
#+end_src

** Block 2 - org
*** Org
**** org-superstar

https://github.com/integral-dw/org-superstar-mode

Prettify headings and plain lists in Org mode.
This package is a direct descendant of ‘org-bullets’, with most of the code base completely rewritten.

#+name: org-superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-headline-bullets-list  '("◉" "▸")))
#+end_src

**** ob-async

https://github.com/astahlman/ob-async

ob-async enables asynchronous execution of org-babel src blocks.

#+name: ob-async
#+begin_src emacs-lisp
(use-package ob-async
  ;; :defer 2
  ;; :commands (org-babel-execute ob-async-org-babel-execute-src-block)
  :init
  (defalias 'org-babel-execute-src-block:async 'ob-async-org-babel-execute-src-block))
#+end_src

**** org

#+name: org
#+begin_src emacs-lisp :noweb yes
(defun org-concat-entries (&rest entries)
  (interactive)
  (mapconcat (lambda (x) (org-entry-get nil x t)) entries ""))

(defun org-tangle-custom () ;; gzim9x
  (interactive)
  (let ((__filename "FILENAME")
        (__entries  "ENTRIES")
        (__tangle   "TANGLE")
        (__no       "no"))
    (or
     (-when-let (filename (org-entry-get nil __filename))
       (-when-let (entries (org-entry-get nil __entries t))
         (unless (string= (org-entry-get nil __tangle t) __no)
           (apply 'org-concat-entries (append (split-string entries) `(,__filename))))))
     __no)))

(use-package org
  :ensure nil

  :hook (org-mode . (lambda()
                      ;; Set default font for org-mode some a bit more
                      (setq buffer-face-mode-face '(:height 130))
                      (buffer-face-mode)))

  :mode ("\\.org\\'" . org-mode)

  :bind (("C-1" . save-buffer)
         :map org-mode-map
         ("C-2" . org-ctrl-c-ctrl-c)
         ("C-c C-z" . slime-switch-to-output-buffer)
         ("C-t" . org-babel-tangle)
         ("M-]" . g7r-save-code-block)
         ("M-[" . g7r-get-code-block))
  ;; :hook ((org-babel-after-execute . org-redisplay-inline-images)) ;; TODO need rewrite

  :custom
  (org-startup-indented t)
  (org-startup-folded 'content)
  (org-src-preserve-indentation nil)
  (org-edit-src-content-indentation 0)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-hide-emphasis-markers t)
  (org-src-window-setup 'current-window)
  (org-hide-emphasis-markers nil)
  (org-todo-keywords '((sequence "TODO(t)" "STARTED(s!)" "DONE(d!/!)" "WAITING(w!/!)" "CANCELLED(c!/!)")))
  (org-todo-keyword-faces '(("TODO"      . (:foreground "DeepPink2"
                                            :weight bold
                                            :height 100))
           		    ("STARTED"   . (:foreground "goldenrod1"
                                            :weight bold
                                            :height 100))
           		    ("DONE"      . (:foreground "snow4"
                                            :weight bold
                                            :height 100))
           		    ("WAITING"   . (:foreground "pink1"
                                            :weight bold
                                            :height 100))
           		    ("CANCELLED" . (:foreground "gray38"
                                            :weight bold
                                            :height 100))))

  ;; state changes will be logged in chronological order, from top to bottom
  (org-log-states-order-reversed nil)

  ;; Don't ask to eval code in SRC blocks
  (org-confirm-babel-evaluate nil)

  (org-hierarchical-todo-statistics nil)

  :custom-face
  (org-property-value ((t (:foreground "LightPink2"
                           :weight normal
                           :family ,(aref fonts 5)))))

  (org-level-1 ((t (:inherit 'outline-1
                    :height 180
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-2 ((t (:inherit 'outline-2
                    :height 170
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-3 ((t (:inherit 'outline-3
                    :height 170
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-4 ((t (:inherit 'outline-4
                    :height 170
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-5 ((t (:inherit 'outline-5
                    :height 170
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-6 ((t (:inherit 'outline-6
                    :height 170
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-meta-line ((t (:height 140
                      :family ,(aref fonts 5)
                      :foreground "LightSalmon2"))))

  (org-block-begin-line ((t (:inherit 'org-block
                             :height 140
                             :family ,(aref fonts 5)
                             :foreground "DarkOrange4"
                             :extend t))))

  :config
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (lisp . t)
                                 (clojure . t)
                                 (shell . t)
                                 (js . t)
                                 (C .t)
                                 (python . t)
                                 ;; (prolog .t)
                                 ;; (perl . t)
      				 ;; (raku . t)
      				 ;; (dart . t)
      				 ;; (php . t)
                                 (plantuml . t)))
  <<org-superstar>>
  <<ob-async>>)
#+end_src

**** org-agenda

#+name: org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :bind ("M-4" . org-agenda)
  :config
  (load-file "~/.emacs.d/agenda-files.el"))
#+end_src

** Block 3 - other packages & preferences
*** paren

https://www.emacswiki.org/emacs/ShowParenMode

show-paren-mode allows one to see matching pairs of parentheses

#+name: paren
#+begin_src emacs-lisp
(use-package paren
    :ensure nil
    :hook (prog-mode . show-paren-mode)
    :custom
    (show-paren-delay 0)
    (show-paren-style 'parenthesis))
#+end_src

*** rainbow-delimiters

https://github.com/Fanael/rainbow-delimiters

rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.

#+name: rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** restart-emacs

https://github.com/iqbalansari/restart-emacs

This is a simple package to restart Emacs for within Emacs.

#+name: restart-emacs
#+begin_src emacs-lisp
(use-package restart-emacs
  :commands restart-emacs
  :bind ("C-x C-c". nil))
#+end_src

*** treemacs

https://github.com/Alexander-Miller/treemacs

Treemacs - a tree layout file explorer for Emacs

#+name: treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :bind ("M-1" . treemacs)
  :custom
  (doom-themes-treemacs-theme "doom-colors")
  :config
  (doom-themes-treemacs-config))
#+end_src

*** vterm

[[https://github.com/akermu/emacs-libvterm][https://github.com/akermu/emacs-libvterm]]

Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.

#+name: vterm
#+begin_src emacs-lisp
(use-package vterm
  :bind ("M-3" . vterm)
  :custom
  (vterm-always-compile-module t))
#+end_src

*** Writeroom

[[https://github.com/joostkremers/writeroom-mode][https://github.com/joostkremers/writeroom-mode]]

writeroom-mode is a minor mode for Emacs that implements a distraction-free writing mode similar to the
famous Writeroom editor for OS X. writeroom-mode is meant for GNU Emacs 24, lower versions are not actively supported.

#+name: writeroom
#+begin_src emacs-lisp
(use-package writeroom-mode
  :bind (("M-2" . writeroom-mode)
         :map writeroom-mode-map
         ("C-," . writeroom-decrease-width)
         ("C-." . writeroom-increase-width)
         ("C-M-=" . writeroom-adjust-width)))
#+end_src

*** Windmove

https://www.emacswiki.org/emacs/WindMove

Windmove is a library built into GnuEmacs starting with version 21. It lets you move point from window to window using Shift and the arrow keys. This is easier to type than ‘C-x o’ and, for some users, may be more intuitive.

#+name: windmove
#+begin_src emacs-lisp
(use-package windmove
  :ensure nil
  :defer 1
  :custom
  (windmove-wrap-around t)
  :config
  ;; use shift + arrow keys to switch between visible buffers
  (windmove-default-keybindings 'super))
#+end_src

*** google-translate

[[https://github.com/atykhonov/google-translate][https://github.com/atykhonov/google-translate]]

This package allows to translate the strings using Google Translate service directly from GNU Emacs.

#+name: google-translate
#+begin_src emacs-lisp
(defun google-translate--search-tkk-new () "Search TKK." (list 430675 2721866130))

(use-package google-translate
    :bind (("M-9" . google-translate-at-point)
           ("M-0" . google-translate-at-point-reverse))
    :init
    (advice-add 'google-translate--search-tkk :override #'google-translate--search-tkk-new)
    :custom
    (google-translate-backend-method 'curl)
    (google-translate-default-source-language "en")
    (google-translate-default-target-language "ru"))
#+end_src

*** which-key

[[https://github.com/justbur/emacs-which-key][https://github.com/justbur/emacs-which-key]]

which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

#+name: which-key
#+begin_src emacs-lisp
(use-package which-key
	:hook (after-init . which-key-mode)
	:custom
	(which-key-idle-delay 3.0)
	(which-key-idle-secondary-delay 0.1))
#+end_src

*** crux

[[https://github.com/bbatsov/crux][https://github.com/bbatsov/crux]]

A Collection of Ridiculously Useful eXtensions for Emacs. crux bundles many useful interactive commands to enhance your overall Emacs experience.

#+name: crux
#+begin_src emacs-lisp
(use-package crux
  :bind (("M-o" . crux-smart-open-line)
         ("C-a" . crux-move-beginning-of-line)
         ("C-k" . crux-smart-kill-line)))
#+end_src

*** YASnippet

[[https://github.com/joaotavora/yasnippet][https://github.com/joaotavora/yasnippet]]
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.

#+name: yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :hook ((org-mode  . yas-minor-mode)
         (prog-mode . yas-minor-mode))

  :bind (:map yas-minor-mode-map
              ;; Disable TAB from expanding snippets, as I don't use it and
              ;; it's annoying.
              ("TAB" . nil)
              ("<tab>" . nil))

	:custom
  ;; Reduce verbosity. The default value is 3. Bumping it down to 2
  ;; eliminates a message about successful snippet lazy-loading setup
  ;; on every(!) Emacs init. Errors should still be shown.
  (yas-verbosity 2)

  (yas-snippet-dirs '("~/.emacs.d/snippets"))
  :config
  (use-package yasnippet-snippets)
  (yas-reload-all))
#+end_src

*** ESUP - Emacs Start Up Profiler

https://github.com/jschaf/esup

Benchmark Emacs Startup time without ever leaving your Emacs.

#+name: esup
#+begin_src emacs-lisp
(use-package esup
  :commands esup
  :custom
  (esup-depth 0))
#+end_src

*** Emms - Emacs Multi-Media System

https://www.emacswiki.org/emacs/EMMS

EMMS is the Emacs Multi-Media System. It tries to be a clean and small application to play multimedia files from Emacs using external players. Many of its ideas are derived from MpthreePlayer, but it tries to be more general and cleaner. It is comparable to Bongo.

#+name: emms
#+begin_src emacs-lisp
(use-package emms
  :commands emms
  :bind (("M-8" . emms-stop)
         ("M-7" . (lambda ()
                    (interactive)
                    (emms-play-directory my-emms-directory-music))))
  :custom
  (emms-player-list '(emms-player-mpv))
  (emms-playlist-buffer-name "*Emms player*")
  :config
  (require 'emms-setup)
  (emms-all))
 #+end_src

*** all-the-icons

#+name: all-the-icons
#+begin_src emacs-lisp
;; In order for the icons to work it is very important that you install
;; the Resource Fonts included in this package, they are available in the
;; fonts directory. You can also install the latest fonts for this package
;; in the (guessed?) based on the OS by calling the following function:
;; M-x all-the-icons-install-fonts

(use-package all-the-icons
  :defer 1)
#+end_src

*** selectrum

https://github.com/raxod502/selectrum

Selectrum is a better solution for incremental narrowing in Emacs,
replacing Helm, Ivy, and Ido.

#+name: selectrum
#+begin_src emacs-lisp
(use-package selectrum
  :hook (after-init . selectrum-mode)
  :bind (:map selectrum-minibuffer-map
         ("<up>"     . selectrum-previous-candidate)
         ("<down>"   . selectrum-next-candidate)
         ("<right>"  . selectrum-next-candidate)
         ("<left>"   . selectrum-previous-candidate)
         ("<escape>" . minibuffer-keyboard-quit))
  :config
  (use-package selectrum-prescient
    :config
    (selectrum-prescient-mode +1)
    (prescient-persist-mode +1)))
  #+end_src

*** ctrlf

#+name: ctrlf
#+begin_src emacs-lisp
(use-package ctrlf
  :hook (after-init . ctrlf-mode))
#+end_src

*** company

https://company-mode.github.io/

Company is a text completion framework for Emacs.
The name stands for "complete anything".
It uses pluggable back-ends and front-ends to retrieve
and display completion candidates.

#+name: company
#+begin_src emacs-lisp
(use-package company
  :hook ((org-mode . company-mode)
         (prog-mode . company-mode))

  :custom
  ;; Make completions display twice as soon.
  (company-idle-delay 0.15)

  ;; Make completions display when you have only typed two character,
  ;; instead of three.
  (company-minimum-prefix-length 2)

  ;; Always display the entire suggestion list onscreen, placing it
  ;; above the cursor if necessary.
  (company-tooltip-minimum company-tooltip-limit)

  (company-tooltip-limit 10)
  (company-tooltip-align-annotations t)
  (company-require-match 'never)

  (company-dabbrev-char-regexp "[[:word:]_:@.-]+")
  (company-dabbrev-downcase nil)
  (company-dabbrev-ignore-case nil)
  (company-dabbrev-minimum-length 2)

  :config
  (use-package company-box
    :hook (company-mode . company-box-mode)
    :custom
    (company-box-show-single-candidate t)
    (company-box-backends-colors nil)
    (company-box-max-candidates 25)
    (company-box-scrollbar nil)))
#+end_src

*** security

#+name: security
#+begin_src emacs-lisp
(use-package epa
  :after (epg)
  :init
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  :config
  (epa-file-enable)
  :custom
  (epa-pinentry-mode 'loopback)
  :pin melpa)
#+end_src

*** smartparens

https://github.com/Fuco1/smartparens

Smartparens is a minor mode for dealing with pairs in Emacs.

#+name: smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode))
#+end_src

*** Projectile

https://github.com/bbatsov/projectile

Projectile is a project interaction library for Emacs.
Its goal is to provide a nice set of features operating
on a project level without introducing external dependencies
(when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without
the use of GNU find (but for performance sake an indexing
mechanism backed by external commands exists as well).

#+name: projectile
#+begin_src emacs-lisp
(use-package projectile
  :hook (after-init . projectile-mode))
#+end_src

*** org-redmine

https://github.com/gongo/org-redmine

#+name: org-redmine
#+begin_src emacs-lisp
;; (use-package org-redmine
;;     :ensure nil ; do not download by use-package
;;     :init
;;     (add-to-list 'load-path "~/.emacs.d/org-redmine/"))
#+end_src

*** dash-at-point

https://github.com/stanaka/dash-at-point

Dash is an API Documentation Browser and Code Snippet Manager. dash-at-point make it easy to search the word at point with Dash.

#+name: dash-at-point
#+begin_src emacs-lisp
(use-package dash-at-point
  :bind ("C-c d" . dash-at-point))
#+end_src

*** aggressive-indent

https://github.com/Malabarba/aggressive-indent-mode

aggressive-indent-mode is a minor mode that keeps your code always indented.
It reindents after every change, making it more reliable than electric-indent-mode.

#+name: aggressive-indent
#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook ((emacs-lisp-mode . aggressive-indent-mode)
         (clojure-mode . aggressive-indent-mode)))
#+end_src

** Block 4 - languages
*** Elisp
**** highlight-defined

#+name: highlight-defined
#+begin_src emacs-lisp
(use-package highlight-defined
  :hook (emacs-lisp-mode  . highlight-defined-mode)
  :custom-face
  (highlight-defined-variable-name-face ((t (:inherit 'font-lock-variable-name-face
                                             :foreground "RosyBrown3"))))
  (highlight-defined-function-name-face ((t (:inherit 'font-lock-function-name-face
                                             :foreground "RosyBrown3"))))
  (highlight-defined-builtin-function-name-face ((t (:inherit 'highlight-defined-function-name-face
                                                     :foreground "grey65"))))
  :custom
  (highlight-defined-face-use-itself nil))
#+end_src

**** elisp-mode

Emacs lisp mode

#+name: elisp
#+begin_src emacs-lisp :noweb yes
(use-package elisp-mode
  :ensure nil
  :defines flycheck-disabled-checkers
  :hook (emacs-lisp-mode . (lambda ()
                             "Disable the checkdoc checker."
                             (interactive)
                             (setq-local flycheck-disabled-checkers
                                         '(emacs-lisp-checkdoc)))))
<<highlight-defined>>
#+end_src

*** Lisp

#+name: lisp
#+begin_src emacs-lisp
(use-package slime
  :bind ("M-)" . slime-close-all-parens-in-sexp)
  :init
  (setq inferior-lisp-program "/usr/local/bin/sbcl --noinform")
  :config
  (load (expand-file-name "~/quicklisp/slime-helper.el")))
#+end_src

*** JavaScript

#+name: javascript
#+begin_src emacs-lisp
;; A major mode for editing JSX files
;; This mode derives from js2-mode, extending its parser to support
;; JSX syntax according to the official spec. This means you get all
;; of the js2 features plus proper syntax checking and highlighting
;; of JSX code blocks.
(use-package rjsx-mode
  :mode ("\\.js\\'" "\\.jsx\\'")

  :custom
  (js2-strict-missing-semi-warning nil)

  :config
  ;; This provides add-node-modules-path, which searches the current
  ;; files parent directories for the node_modules/.bin/ directory
  ;; and adds it to the buffer local exec-path.
  ;; This allows Emacs to find project based installs of e.g. eslint.
  (use-package add-node-modules-path
    :hook rjsx-mode))
#+end_src

*** Clojure
**** flycheck-clj-kondo

https://github.com/borkdude/flycheck-clj-kondo

This package integrates clj-kondo with Emacs via flycheck.

#+name: flycheck-clj-kondo
#+begin_src emacs-lisp
(use-package flycheck-clj-kondo
  :defer t)
#+end_src
**** cider

https://github.com/clojure-emacs/cider

CIDER is the Clojure(Script) Interactive Development Environment that Rocks!

CIDER extends Emacs with support for interactive programming in Clojure.
The features are centered around cider-mode, an Emacs minor-mode that
complements clojure-mode. While clojure-mode supports editing Clojure source
files, cider-mode adds support for interacting with a running Clojure process
for compilation, code completion, debugging, definition and documentation
lookup, running tests and so on.

#+name: cider
#+begin_src emacs-lisp
(use-package cider
  :commands (cider-jack-in
             cider-jack-in-clj
             cider-jack-in-cljs
             cider-jack-in-clj&cljs)
  :custom

  ;; The CIDER welcome message often obscures any error messages that
  ;; the above code is supposed to be making visible. So, we need to
  ;; turn off the welcome message.
  (cider-repl-display-help-banner nil)

  ;; Sometimes in the CIDER REPL, when Emacs is running slowly, you
  ;; can manage to press TAB before the Company completions menu pops
  ;; up. This triggers a 'completing-read', which is disorienting. So
  ;; we reset TAB to its default functionality (i.e. indent only) in
  ;; the CIDER REPL.
  (cider-repl-tab-command 'indent-for-tab-command)

  ;; Don't focus the cursor in the CIDER REPL once it starts. Since
  ;; the REPL takes so long to start up, especially for large
  ;; projects, you either have to wait for a minute without doing
  ;; anything or be prepared for your cursor to suddenly shift buffers
  ;; without warning sometime in the near future. This is annoying, so
  ;; turn off the behavior. For a historical perspective see [1].
  ;;
  ;; [1]: https://github.com/clojure-emacs/cider/issues/1872
  (cider-repl-pop-to-buffer-on-connect 'display-only)

  :pin melpa-stable)
#+end_src

**** clojure-mode

https://github.com/clojure-emacs/clojure-mode

clojure-mode is an Emacs major mode that provides font-lock (syntax highlighting),
indentation, navigation and refactoring support for the Clojure(Script) programming language.

#+name: clojure
#+begin_src emacs-lisp :noweb yes
<<flycheck-clj-kondo>>

(use-package clojure-mode
  :mode (("\\.\\(clj\\|dtm\\|edn\\)\\'" . clojure-mode)
         ("\\.cljc\\'" . clojurec-mode)
         ("\\.cljs\\'" . clojurescript-mode))
  :config
  (require 'flycheck-clj-kondo))

<<cider>>
#+end_src

*** SCSS

https://github.com/antonj/scss-mode

Major mode for editing SCSS files in Emacs.

#+name: scss
#+begin_src emacs-lisp
(use-package scss-mode
  :mode ("\\.scss$" . scss-mode))
#+end_src

*** Dart

#+name: dart
#+begin_src emacs-lisp
(use-package dart-mode
  :defer 1
  :custom
  (lsp-dart-sdk-dir "~/development/flutter/bin/cache/dart-sdk/")
  (dart-sdk-path "~/development/flutter/bin/cache/dart-sdk/"))

(use-package flutter
  :after dart-mode
  :custom
  (flutter-sdk-path "~/development/flutter/"))

(use-package lsp-dart
  :hook
  (dart-mode . lsp)
  :custom
  (lsp-dart-flutter-sdk-dir "~/development/flutter/")
  (lsp-dart-sdk-dir "~/development/flutter/bin/cache/dart-sdk/")
  (lsp-dart-flutter-fringe-colors nil)
  (lsp-dart-flutter-widget-guides nil)
  (lsp-dart-closing-labels nil)
  (lsp-dart-main-code-lens nil))

;; :init
;; (setq lsp-dart-flutter-fringe-colors nil
;;       lsp-dart-flutter-widget-guides nil
;;       lsp-dart-closing-labels nil
;;       lsp-dart-main-code-lens nil)

;; run app from desktop without emulator
(use-package hover)
#+end_src

*** Prolog

#+name: prolog
#+begin_src emacs-lisp
;; (load-file "~/.emacs.d/prolog.elc")
;; (autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
;; (add-to-list 'auto-mode-alistt '("\\.pl\\'" . prolog-mode))

(use-package prolog
    :requires (quelpa quelpa-use-package)
    :quelpa
    (prolog :version original :fetcher file :path "~/.emacs.d/prolog.el")
    :custom
    (prolog-system 'swi)  ;; ob-prolog for swi only
    (prolog-program-switches '((swi ("-G128M" "-T128M" "-L128M" "-O"))
                               (t nil)))
    (prolog-electric-if-then-else-flag t))

;; (quelpa '(prolog :version original :fetcher file :path "~/.emacs.d/prolog.el"))

(use-package ediprolog
    :ensure nil
    :bind ([f10] . ediprolog-dwim)
    :custom
    (ediprolog-system 'swi))
#+end_src

*** Raku

#+name: raku
#+begin_src emacs-lisp
(use-package raku-mode)
#+end_src

*** YAML

https://github.com/yoshiki/yaml-mode

Simple major mode to edit YAML file for emacs

#+name: yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml\\'" . yaml-mode))
#+end_src

*** PHP

#+name: php
#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package))

(use-package php-mode)
#+end_src

** Block 5 - magit
*** magit

https://magit.vc/

Magit is a complete text-based user interface to Git.
It fills the glaring gap between the Git command-line interface and various GUIs,
letting you perform trivial as well as elaborate version control tasks with just
a couple of mnemonic key presses.

#+name: magit
#+begin_src emacs-lisp
(use-package magit
  :defer 1
  :bind ("C-5" . magit-status))
#+end_src

** Block 6 - syntax checking
*** flycheck

#+name: flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :hook (after-init . global-flycheck-mode)
  :config
  (use-package flycheck-pos-tip))
#+end_src

** Block 7 - functions
*** functions

#+name: functions
#+begin_src emacs-lisp
(defun close-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list))
  (delete-other-windows))

(defun open-shell (path name)
  (dired path)
  (shell)
  (rename-buffer name))
#+end_src
* early-init.el

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el :noweb yes
;; early-init.el --- Early initialization. -*- lexical-binding: t -*-

;; Defer garbage collection further back in the startup process
(setq gc-cons-threshold most-positive-fixnum)

;; Package initialize occurs automatically, before 'user-init-file' is
;; loaded, but after 'early-init-file'. We handle package
;; initialization, so we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)

;; Inhibit resizing frame
(setq frame-inhibit-implied-resize t)

;; Faster to disable these here (before they've been initialized)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

* init.el

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :noweb yes
;;; init.el -*- lexical-binding: t; -*-

<<speed-up>>
<<package>>

;; Block 1 - main view & preferences for it

<<use-package>>
<<doom-themes>>
<<customize>>
<<ui-settings>>
<<doom-modeline>>
<<menu>>
<<private>>
<<settings>>
<<registers>>


;; Block 2 - orgmode

<<org>>
<<org-agenda>>

;; Block 3 - other packages & preferences

<<paren>>
<<rainbow-delimiters>>
<<restart-emacs>>
<<treemacs>>
<<vterm>>
<<writeroom>>
<<windmove>>
<<google-translate>>
<<which-key>>
<<crux>>
<<yasnippet>>
<<esup>>
<<emms>>
<<all-the-icons>>
<<selectrum>>
<<ctrlf>>
<<company>>
<<security>>
<<smartparens>>
<<projectile>>
<<org-redmine>>
<<dash-at-point>>
<<aggressive-indent>>


;; Block 4 - languages

<<elisp>>
<<lisp>>
<<javascript>>
<<clojure>>
<<scss>>
;; (require 'module-dart)
;; (require 'module-prolog)
;; (require 'module-raku)
<<yaml>>
;; (require 'module-php)
;; (require 'module-plantuml)


;; Block 5 - magit

<<magit>>


;; Block 6 - syntax checking

<<flycheck>>


;; Block 7 - functions

<<functions>>
#+end_src
