* gc-tricks

#+name: gc-tricks
#+begin_src emacs-lisp
;; increase garbage
(setq gc-cons-threshold most-positive-fixnum)

;; set to 128mb after startup
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 134217728)))
#+end_src

* package

#+name: package
#+begin_src emacs-lisp
(require 'package)

;; To prevent initialising twice
(setq package-enable-at-startup nil)

;; MELPA Stable (Milkypostman’s Emacs Lisp Package Archive)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

;; GNU Emacs Lisp Package Archive
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))

;; Org mode
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))

;; Make the packages available to the current session.
(package-initialize)

(add-to-list 'load-path "~/.emacs.d/modules")
#+end_src

* modules
** Block 1 - main view & preferences for it
*** use-package

[[https://github.com/jwiegley/use-package][https://github.com/jwiegley/use-package]]

The use-package macro allows to isolate package configuration in .emacs file in a way that is both
performance-oriented and, well, tidy.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-use-package.el
;;; module-use-package.el --- Config for use-package -*- lexical-binding: t -*-

;; install use-package if not exits
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'bind-key)

;; The :ensure keyword causes the package(s) to be installed automatically if not
;; already present on your system. Enable use-package-always-ensure if you wish this
;; behavior to be global for all packages:

(require 'use-package-ensure)
(setq use-package-always-ensure t)

;; When a package is loaded, and if you have use-package-verbose set to t, or if
;; the package takes longer than 0.1s to load, you will see a message to indicate
;; this loading activity in the *Messages* buffer. The same will happen for
;; configuration, or :config blocks that take longer than 0.1s to execute.
;; In general, you should keep :init forms as simple and quick as possible, and
;; put as much as you can get away with into the :config block.
;; This way, deferred loading can help your Emacs to start as quickly as possible.
(setq use-package-verbose t)

(setq use-package-compute-statistics t)

(setq use-package-minimum-reported-time 0)

(provide 'module-use-package)
;;; module-use-package.el ends here
#+end_src

*** theme

https://github.com/hlissner/emacs-doom-themes

A theme megapack for GNU Emacs, inspired by community favorites.
Special attention is given for Doom Emacs and solaire-mode support,
but will work fine anywhere else.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-theme.el
;;; module-theme.el --- Config for theme

(use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold nil) ; if nil, bold is universally disabled
    (setq doom-themes-enable-italic nil) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

(provide 'module-theme)

;;; module-theme.el ends here
#+end_src

*** theme-settings

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-theme-settings.el
;;; module-theme-settings.el --- Config for theme settings

;; Foreground colors
(setq fg-colors ["wheat2"
                 "white"
                 "MediumOrchid2"
                 "#5c6380"
                 "wheat1"
                 "DarkOliveGreen2"
                 "PeachPuff2"
                 "DarkSeaGreen2"
                 "DarkSlateGray2"])

;; Background colors
(setq bg-colors [ "#222131"
                  "grey12"
                  "#21242e"
                  "black"
                  "#071020"
                  "grey20"
                  "#231c30"])

;; Fonts
(setq fonts ["JetBrains Mono"
			   "Monitorica"
             "Aldrich [RUS by Daymarius]"
             "Gardens CM"
             "Jet Set"
             "arial curive"
             "Hack"
             "Azbuka04"
             "Comic Helvetic"
             "Oxygen"
             "Product Sans(RUS BY LYAJKA)"
             "Ropa Sans [RUS by Daymarius]"
             "Trebuchet"
             "Arial"
             "Verdana"
             "Tahoma"
             "Monaco"
             "PT Mono"])

(provide 'module-theme-settings)

;;; module-theme-settings.el ends here
#+end_src

#+RESULTS:
: module-theme-settings

*** customize

This stops emacs adding customised settings to init.el.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-customize.el
;;; module-customize.el --- Config for customize

(setq custom-file "~/.emacs.d/customize.el")
(when (file-readable-p custom-file)
    (load custom-file))

(provide 'module-customize)

;;; module-customize.el ends here
#+end_src

*** ui-settings

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-ui-settings.el
;;; module-ui-settings.el --- Config for UI-settings

;; Skip startup screen
(setq inhibit-startup-screen t)

;; Start with a blank canvas
(setq initial-scratch-message "")

;; Disable horizontal scrollbar
(horizontal-scroll-bar-mode -1)

;; Disable toolbar vertical scrollbar
(scroll-bar-mode -1)

;; Disable toolbar
(tool-bar-mode -1)

;; Displays column number in the mode line
(setq column-number-mode t)

;; Disable cursor blink
(blink-cursor-mode -1)

;; (add-to-list 'default-frame-alist
;;              '(font . "JetBrains Mono-12"))

;; (setq frame-title-format
;;       '(:eval (if (buffer-file-name)
;;                    (abbreviate-file-name (buffer-file-name))
;;                    "%b")))

(tooltip-mode -1)

(setq use-dialog-box nil)

(setq redisplay-dont-pause t)
(setq ring-bell-function 'ignore)

(setq menu-bar-mode t)

(when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

(when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

(when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

(provide 'module-ui-settings)
;;; module-ui-settings.el ends here
#+end_src

*** doom-modeline

https://github.com/seagle0128/doom-modeline

A fancy and fast mode-line inspired by minimalism design.
It's integrated into Centaur Emacs, Doom Emacs and Spacemacs.

#+begin_src emacs-lisp  :tangle ~/.emacs.d/modules/module-doom-modeline.el
;;; module-doom-modeline.el --- Config for doom-modeline

(use-package doom-modeline
    :hook (after-init . doom-modeline-mode))

(provide 'module-doom-modeline)

;;; module-doom-modeline.el ends here
#+end_src
gl
*** menu

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-menu.el
;;; module-menu.el --- Config for menu

(load-file "~/.emacs.d/menu.el")

(provide 'module-menu)

;;; module-menu.el ends here
#+end_src

*** exec-path-from-shell

[[https://github.com/purcell/exec-path-from-shell][https://github.com/purcell/exec-path-from-shell]]
A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-exec-path-from-shell.el
;;; module-exec-path-from-shell.el --- Config for exec-path-from-shell

(use-package exec-path-from-shell
  ;; :disabled
  :config
  (exec-path-from-shell-initialize))

(provide 'module-exec-path-from-shell)

;;; module-exec-path-from-shell.el ends here
#+end_src

*** settings

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-settings.el
;;; module-settings.el --- Config for settings

(setq-default indent-tabs-mode nil)


(setq make-backup-files nil)

(setq auto-save-default nil)

(setq auto-save-list-file-name nil)

;; Dired

;; on macOS, ls doesn't support the --dired option while on Linux it is supported.

(when (string= system-type "darwin")
  (setq dired-use-ls-dired nil))

(setq dired-recursive-deletes 'always)

(setq dired-recursive-copies 'always)

(global-set-key (kbd "M-SPC") 'cycle-spacing)

(global-set-key (kbd "M-/") 'hippie-expand)

(global-set-key (kbd "C-x C-b") 'ibuffer)


;; Winner Mode is a global minor mode.
;; When activated, it allows you to “undo” (and “redo”) changes
;; in the window configuration with the key commands ‘C-c left’ and ‘C-c right’.

(when (fboundp 'winner-mode)
    (winner-mode 1))

;; y is shorter than yes.
(defalias 'yes-or-no-p 'y-or-n-p)

;; disable eldoc globally
(global-eldoc-mode -1)

(desktop-save-mode 1)

;; Kill process buffer without confirmation
(setq kill-buffer-query-functions nil)

;; auto-revert-mode
(add-hook 'prog-mode-hook 'auto-revert-mode)
(add-hook 'text-mode-hook 'auto-revert-mode)

;; I never want whitespace at the end of lines. Remove it on save.
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(provide 'module-settings)
;;; module-settings.el ends here
#+end_src

*** registers

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-registers.el
;;; module-registers.el --- Config for registers

(load-file "~/.emacs.d/registers.el")

(provide 'module-registers)

;;; module-registers.el ends here
#+end_src

** Block 2 - org
*** Org
**** org-superstar

https://github.com/integral-dw/org-superstar-mode

Prettify headings and plain lists in Org mode.
This package is a direct descendant of ‘org-bullets’, with most of the code base completely rewritten.

#+name: org-superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-headline-bullets-list  '("◉" "▸")))
#+end_src

**** ob-async

https://github.com/astahlman/ob-async

ob-async enables asynchronous execution of org-babel src blocks.

#+name: ob-async
#+begin_src emacs-lisp
(use-package ob-async
    :disabled
    :defer 2
    :commands (org-babel-execute ob-async-org-babel-execute-src-block)
    :init
    (defalias 'org-babel-execute-src-block:async 'ob-async-org-babel-execute-src-block))
#+end_src

**** org

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-org.el :noweb yes
;;; module-org.el --- Config for org -*- lexical-binding: t -*-

(defun org-concat-entries (&rest entries)
  (interactive)
  (mapconcat (lambda (x) (org-entry-get nil x t)) entries ""))

(defun org-tangle-custom () ;; gzim9x
  (interactive)
  (let ((__filename "FILENAME")
        (__entries  "ENTRIES")
        (__tangle   "TANGLE")
        (__no       "no"))
    (or
     (-when-let (filename (org-entry-get nil __filename))
       (-when-let (entries (org-entry-get nil __entries t))
         (unless (string= (org-entry-get nil __tangle t) __no)
           (apply 'org-concat-entries (append (split-string entries) `(,__filename))))))
     __no)))

(use-package org
  :mode ("\\.org\\'" . org-mode)

  :bind (("C-1" . save-buffer)
         :map org-mode-map
         ("C-2" . org-ctrl-c-ctrl-c)
         ("C-c C-z" . slime-switch-to-output-buffer)
         ("C-t" . org-babel-tangle)
         ("M-]" . g7r-save-code-block)
         ("M-[" . g7r-get-code-block))
  ;; :hook ((org-babel-after-execute . org-redisplay-inline-images)) ;; TODO need rewrite

  :custom
  (org-startup-indented t)
  (org-startup-folded 'content)
  (org-src-preserve-indentation nil)
  (org-edit-src-content-indentation 0)
  (org-src-tab-acts-natively t)
  (org-hide-emphasis-markers t)
  (org-src-window-setup 'current-window)
  (org-hide-emphasis-markers nil)
  (org-todo-keywords '((sequence "TODO(t)" "STARTED(s!)" "DONE(d!/!)" "WAITING(w!/!)" "CANCELLED(c!/!)")))
  (org-todo-keyword-faces '(("TODO"      . (:foreground "DeepPink2"
                                            :weight bold
                                            :height 100))
           		    ("STARTED"   . (:foreground "goldenrod1"
                                            :weight bold
                                            :height 100))
           		    ("DONE"      . (:foreground "snow4"
                                            :weight bold
                                            :height 100))
           		    ("WAITING"   . (:foreground "pink1"
                                            :weight bold
                                            :height 100))
           		    ("CANCELLED" . (:foreground "gray38"
                                            :weight bold
                                            :height 100))))

  ;; state changes will be logged in chronological order, from top to bottom
  (org-log-states-order-reversed nil)

  ;; Don't ask to eval code in SRC blocks
  (org-confirm-babel-evaluate nil)

  (org-hierarchical-todo-statistics nil)

  :custom-face
  (org-property-value ((t (:foreground "LightPink2"
                           :weight normal
                           :family ,(aref fonts 5)))))

  (org-level-1 ((t (:inherit 'outline-1
                    :height 180
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-2 ((t (:inherit 'outline-2
                    :height 170
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-3 ((t (:inherit 'outline-3
                    :height 160
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-4 ((t (:inherit 'outline-4
                    :height 160
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-5 ((t (:inherit 'outline-5
                    :height 160
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-level-6 ((t (:inherit 'outline-6
                    :height 160
                    :family ,(aref fonts 1)
                    :weight bold))))

  (org-block-begin-line ((t (:inherit 'org-block
                             :family ,(aref fonts 5)
                             :foreground "DarkOrange3"
                             :extend t))))
  :config
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (lisp . t)
                                 (clojure . t)
                                 (shell . t)
                                 (js . t)
                                 (C .t)
                                 (python . t)
                                 ;; (prolog .t)
                                 ;; (perl . t)
      				 ;; (raku . t)
      				 ;; (dart . t)
      				 ;; (php . t)
                                 (plantuml . t))))

<<org-superstar>>

<<ob-async>>

(provide 'module-org)

;;; module-org.el ends here
#+end_src

**** agenda

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-agenda.el
;;; module-agenda.el --- Config for agenda

(use-package org-agenda
  :ensure nil
  :bind ("M-4" . org-agenda)
  :config
  (load-file "~/.emacs.d/agenda-files.el"))

(provide 'module-agenda)

;;; module-agenda.el ends here
#+end_src

** Block 3 - other packages & preferences
*** paren

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-paren.el
;;; module-paren.el --- Config for paren

(use-package paren
    :ensure nil
    :hook (prog-mode . show-paren-mode)
    :custom
    (show-paren-delay 0)
    (show-paren-style 'parenthesis))

(provide 'module-paren)

;;; module-paren.el ends here
#+end_src

*** rainbow-delimiters

https://github.com/Fanael/rainbow-delimiters

rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-rainbow-delimiters.el
;;; module-rainbow-delimiters.el --- Config for rainbow-delimiters

(use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

(provide 'module-rainbow-delimiters)

;;; module-rainbow-delimiters.el ends here
#+end_src

*** restart-emacs

https://github.com/iqbalansari/restart-emacs

This is a simple package to restart Emacs for within Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-restart-emacs.el
;;; module-restart-emacs.el --- Config for restart-emacs

(use-package restart-emacs
  :commands restart-emacs
  :bind ("C-x C-c". nil))

(provide 'module-restart-emacs)

;;; module-restart-emacs.el ends here
#+end_src

*** NeoTree

https://github.com/jaypei/emacs-neotree

A Emacs tree plugin like NerdTree for Vim.

#+name: neotree
#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-neotree.el
;;; module-neotree.el --- Config for neotree

(use-package neotree
    :init
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    :bind ("M-1" . neotree-toggle))

(provide 'module-neotree)

;;; module-neotree.el ends here
#+end_src

*** vterm

[[https://github.com/akermu/emacs-libvterm][https://github.com/akermu/emacs-libvterm]]

Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-vterm.el
;;; module-vterm.el --- Config for vterm

(use-package vterm
  :bind ("M-3" . vterm)
  :custom
  (vterm-always-compile-module t))

(provide 'module-vterm)

;;; module-vterm.el ends here
#+end_src

*** Writeroom

[[https://github.com/joostkremers/writeroom-mode][https://github.com/joostkremers/writeroom-mode]]

writeroom-mode is a minor mode for Emacs that implements a distraction-free writing mode similar to the
famous Writeroom editor for OS X. writeroom-mode is meant for GNU Emacs 24, lower versions are not actively supported.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-writeroom.el
;;; module-writeroom.el --- Config for Writeroom

(use-package writeroom-mode
    :bind ("M-2" . writeroom-mode))

(provide 'module-writeroom)
;;; module-writeroom.el ends here
#+end_src

*** Windmove

https://www.emacswiki.org/emacs/WindMove

Windmove is a library built into GnuEmacs starting with version 21. It lets you move point from window to window using Shift and the arrow keys. This is easier to type than ‘C-x o’ and, for some users, may be more intuitive.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-windmove.el
;;; module-windmove.el --- Config for windmove

(use-package windmove
  :ensure nil
  :defer 1
  :custom
  (windmove-wrap-around t)
  :config
  ;; use shift + arrow keys to switch between visible buffers
  (windmove-default-keybindings 'super))

(provide 'module-windmove)

;;; module-windmove.el --- Config for Writeroom
#+end_src

*** google-translate

[[https://github.com/atykhonov/google-translate][https://github.com/atykhonov/google-translate]]

This package allows to translate the strings using Google Translate service directly from GNU Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-google-translate.el
;;; module-google-translate.el --- Config for google-translate

(defun google-translate--search-tkk-new () "Search TKK." (list 430675 2721866130))

(use-package google-translate
    :bind (("M-9" . google-translate-at-point)
           ("M-0" . google-translate-at-point-reverse))
    :init
    (advice-add 'google-translate--search-tkk :override #'google-translate--search-tkk-new)
    :custom
    (google-translate-backend-method 'curl)
    (google-translate-default-source-language "en")
    (google-translate-default-target-language "ru")
    :pin melpa)

(provide 'module-google-translate)

;;; module-google-translate.el ends here
#+end_src

*** which-key

[[https://github.com/justbur/emacs-which-key][https://github.com/justbur/emacs-which-key]]

which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-which-key.el
;;; module-which-key.el --- Config for which-key

(use-package which-key
	:hook (after-init . which-key-mode)
	:custom
	(which-key-idle-delay 3.0)
	(which-key-idle-secondary-delay 0.1))

(provide 'module-which-key)

;;; module-which-key.el ends here
#+end_src

*** crux

[[https://github.com/bbatsov/crux][https://github.com/bbatsov/crux]]

A Collection of Ridiculously Useful eXtensions for Emacs. crux bundles many useful interactive commands to enhance your overall Emacs experience.

#+begin_src emacs-lisp  :tangle ~/.emacs.d/modules/module-crux.el
;;; module-crux.el --- Config for crux

(use-package crux
    :bind (("M-o" . crux-smart-open-line)
           ("C-a" . crux-move-beginning-of-line)
           ("C-k" . crux-smart-kill-line))
    :pin melpa)

(provide 'module-crux)

;;; module-crux.el ends here
#+end_src

*** YASnippet

[[https://github.com/joaotavora/yasnippet][https://github.com/joaotavora/yasnippet]]
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-yasnippet.el
;;; module-yasnippet.el --- Config for yasnippet

(use-package yasnippet
	:hook (prog-mode . yas-minor-mode)
	:custom
  (yas-snippet-dirs '("~/.emacs.d/snippets"))
  :config
  (use-package yasnippet-snippets)
  (yas-reload-all))

(provide 'module-yasnippet)

;;; module-yasnippet.el ends here
#+end_src

*** ESUP - Emacs Start Up Profiler

https://github.com/jschaf/esup

Benchmark Emacs Startup time without ever leaving your Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-esup.el
;;; module-esup.el --- Config for esup

(use-package esup
  :commands esup
  :custom
  (esup-depth 0)
  :pin melpa-stable)

(provide 'module-esup)

;;; module-esup.el ends here
#+end_src

*** Emms - Emacs Multi-Media System

https://www.emacswiki.org/emacs/EMMS

EMMS is the Emacs Multi-Media System. It tries to be a clean and small application to play multimedia files from Emacs using external players. Many of its ideas are derived from MpthreePlayer, but it tries to be more general and cleaner. It is comparable to Bongo.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-emms.el
;;; module-emms.el --- Config for Emms

(use-package emms
    :commands emms
    :config
    (require 'emms-setup)
    (emms-all)
    (setq emms-player-list '(emms-player-mpv))
    (setq emms-playlist-buffer-name "*Emms player*"))

(provide 'module-emms)

;;; module-emms.el ends here
 #+end_src

*** all-the-icons

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-all-the-icons.el
;;; module-all-the-icons.el --- Config for all-the-icons

;; In order for the icons to work it is very important that you install
;; the Resource Fonts included in this package, they are available in the
;; fonts directory. You can also install the latest fonts for this package
;; in the (guessed?) based on the OS by calling the following function:
;; M-x all-the-icons-install-fonts

(use-package all-the-icons
  :defer 1)

(provide 'module-all-the-icons)

;;; module-all-the-icons.el ends here
#+end_src

*** ivy

https://github.com/abo-abo/swiper

Flexible, simple tools for minibuffer completion in Emacs.
Ivy is a generic completion mechanism for Emacs. While it operates
similarly to other completion schemes such as icomplete-mode, Ivy
aims to be more efficient, smaller, simpler, and smoother to use
yet highly customizable.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-ivy.el
;;; module-ivy.el --- Config for Ivy/swiper/councel -*- lexical-binding: t -*-

(use-package ivy
  :hook (after-init . ivy-mode)

  :bind (("C-x b" . ivy-switch-buffer)
         :map ivy-minibuffer-map
         ("<up>"     . ivy-previous-history-element)
         ("<down>"   . ivy-next-history-element)
         ("<right>"  . ivy-next-line)
         ("<left>"   . ivy-previous-line)
         ("<escape>" . minibuffer-keyboard-quit))

  :custom
  (ivy-use-virtual-buffers t)
  (enable-recursive-minibuffers t)

  ;; By default ivy starts filters with ^.
  ;; I don't normally want that and can easily type it manually when I do.
  (ivy-initial-inputs-alist nil)

  :config
  ;; Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
  (use-package counsel
    :bind ("M-y" . counsel-yank-pop))

  ;; Swiper, an Ivy-enhanced alternative to Isearch.
  (use-package swiper
    :bind ("C-5" . swiper-isearch)
    :custom
    (search-default-mode #'char-fold-to-regexp))

  (use-package all-the-icons-ivy
    :hook (after-init . all-the-icons-ivy-setup)))

(provide 'module-ivy)
;;; module-ivy.el ends here
#+end_src

*** company

https://company-mode.github.io/

Company is a text completion framework for Emacs.
The name stands for "complete anything".
It uses pluggable back-ends and front-ends to retrieve
and display completion candidates.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-company.el
;;; module-company.el --- Config for company-mode

(use-package company
  :hook ((org-mode . company-mode)
         (prog-mode . company-mode))
  :custom
  (company-tooltip-limit 10)
  (company-tooltip-align-annotations t)
  (company-require-match 'never)
  ;; (company-idle-delay 0.2)
  ;; (company-minimum-prefix-length 2)
  ;; (company-selection-wrap-around t)
  ;; (company-echo-delay 0)
  ;; (company-format-margin-function nil)
  (company-dabbrev-char-regexp "[[:word:]_:@.-]+")
  (company-dabbrev-downcase nil)
  (company-dabbrev-ignore-case nil)
  ;; (company-require-match nil)
  (company-dabbrev-minimum-length 2))

(use-package company-box
  :hook (company-mode . company-box-mode)
  :custom
  (company-box-show-single-candidate t)
  (company-box-backends-colors nil)
  (company-box-max-candidates 25)
  (company-box-scrollbar nil))

(provide 'module-company)

;;; module-company.el ends here
#+end_src

*** security

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-security.el
;;; module-security.el --- Config for encription and security

(use-package epa
  :after (epg)
  :init
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  :config
  (epa-file-enable)
  :custom
  (epa-pinentry-mode 'loopback)
  :pin melpa)

(provide 'module-security)
;;; module-security.el ends here
#+end_src

*** smartparens

https://github.com/Fuco1/smartparens

Smartparens is a minor mode for dealing with pairs in Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-smartparens.el
;;; module-smartparens.el --- Config for smartparens

(use-package smartparens
  :hook (prog-mode . smartparens-mode))

(provide 'module-smartparens)
;;; module-smartparens.el ends here
#+end_src

*** Redmine

https://github.com/gongo/org-redmine

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-org-redmine.el
;;; module-org-redmine.el --- Config for org-redmine

;; (use-package org-redmine
;;     :ensure nil ; do not download by use-package
;;     :init
;;     (add-to-list 'load-path "~/.emacs.d/org-redmine/"))

(provide 'module-org-redmine)

;;; module-org-redmine.el ends here
#+end_src

*** dash-at-point

https://github.com/stanaka/dash-at-point

Dash is an API Documentation Browser and Code Snippet Manager. dash-at-point make it easy to search the word at point with Dash.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-dash-at-point.el
;;; module-dash-at-point.el --- Config for dash-at-point

(use-package dash-at-point
    :bind ("C-c d" . dash-at-point))

(provide 'module-dash-at-point)

;;; module-dash-at-point.el ends here
#+end_src



** Block 4 - languages
*** Lisp

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-lisp.el
;;; module-lisp.el --- Config for lisp

(use-package slime
  :bind ("M-)" . slime-close-all-parens-in-sexp)
  :init
  (setq inferior-lisp-program "/usr/local/bin/sbcl --noinform")
  :config
  (load (expand-file-name "~/quicklisp/slime-helper.el")))

(provide 'module-lisp)

;;; module-lisp.el ends here
#+end_src

*** JavaScript

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-javascript.el
;;; module-javascript.el --- Config for JavaScript

;; searches the current files parent directories for the node_modules/.bin/ directory and adds it to the buffer local exec-path
(use-package add-node-modules-path
  :hook js-mode
  :pin melpa-stable)

(use-package js2-mode
  :after (add-node-modules-path)
  :mode "\\.js\\'"
  :custom
  (js2-strict-missing-semi-warning nil))

(use-package rjsx-mode
    :mode "\\.js\\'")

(use-package js-doc
  :bind (:map js2-mode-map
              ("C-c i" . js-doc-insert-function-doc)
              ("@" . js-doc-insert-tag)))

(provide 'module-javascript)
;;; module-javascript.el ends here
#+end_src

*** Clojure

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-clojure.el
;;; module-clojure.el --- Config for clojure

(use-package clojure-mode
  :mode (("\\.clj\\'"  . clojure-mode)
         ("\\.edn\\'"  . clojure-mode)
         ("\\.cljc\\'" . clojurescript-mode)
         ("\\.cljs\\'" . clojurescript-mode))

  :config
  (use-package flycheck-clj-kondo)
  (use-package clj-refactor)
  (use-package clojure-snippets)
  (use-package clojure-essential-ref)
  (use-package cider
    :pin melpa-stable))

;; (defun my-clojure-hook ()
;; "Enable some minor modes to enhance Clojure development."
;;   (clj-refactor-mode)
;;   (emidje-mode))
;; (eval-after-load 'cider
;;     #'emidje-enable-nrepl-middleware)
;; (add-hook 'clojure-mode-hook #'my-clojure-hook)

;; (use-package flycheck-clojure
;;   :commands (flycheck-clojure-setup) ;; autoload
;;   :config
;;   (eval-after-load 'flycheck
;;       '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
;;   (add-hook 'after-init-hook #'global-flycheck-mode))


;; (use-package ivy-clojuredocs
;;              :bind (:map clojure-mode-map
;;                          (("C-c d" . ivy-clojuredocs-at-point))))

(provide 'module-clojure)
;;; module-clojure.el ends here
#+end_src

*** SCSS

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-scss.el
;;; module-scss.el --- Config for scss

(use-package scss-mode
    :mode ("\\.scss$" . scss-mode))

(provide 'module-scss)
;;; module-scss.el ends here
#+end_src

*** Dart

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-dart.el
;;; module-dart.el --- Config for dart

(use-package dart-mode
  :defer 1
  :custom
  (lsp-dart-sdk-dir "~/development/flutter/bin/cache/dart-sdk/")
  (dart-sdk-path "~/development/flutter/bin/cache/dart-sdk/"))

(use-package flutter
  :after dart-mode
  :custom
  (flutter-sdk-path "~/development/flutter/"))

(use-package lsp-dart
  :hook
  (dart-mode . lsp)
  :custom
  (lsp-dart-flutter-sdk-dir "~/development/flutter/")
  (lsp-dart-sdk-dir "~/development/flutter/bin/cache/dart-sdk/")
  (lsp-dart-flutter-fringe-colors nil)
  (lsp-dart-flutter-widget-guides nil)
  (lsp-dart-closing-labels nil)
  (lsp-dart-main-code-lens nil))

;; :init
;; (setq lsp-dart-flutter-fringe-colors nil
;;       lsp-dart-flutter-widget-guides nil
;;       lsp-dart-closing-labels nil
;;       lsp-dart-main-code-lens nil)

;; run app from desktop without emulator
(use-package hover)

(provide 'module-dart)
;;; module-dart.el ends here
#+end_src

*** Prolog

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-prolog.el
;;; module-prolog.el --- Config for prolog

;; (load-file "~/.emacs.d/prolog.elc")
;; (autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
;; (add-to-list 'auto-mode-alistt '("\\.pl\\'" . prolog-mode))

(use-package prolog
    :requires (quelpa quelpa-use-package)
    :quelpa
    (prolog :version original :fetcher file :path "~/.emacs.d/prolog.el")
    :custom
    (prolog-system 'swi)  ;; ob-prolog for swi only
    (prolog-program-switches '((swi ("-G128M" "-T128M" "-L128M" "-O"))
                               (t nil)))
    (prolog-electric-if-then-else-flag t))

;; (quelpa '(prolog :version original :fetcher file :path "~/.emacs.d/prolog.el"))

(use-package ediprolog
    :ensure nil
    :bind ([f10] . ediprolog-dwim)
    :custom
    (ediprolog-system 'swi))

(provide 'module-prolog)
;;; module-prolog.el ends here
#+end_src

*** Raku
#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-raku.el
;;; module-raku.el --- Config for Raku

(use-package raku-mode)

(provide 'module-raku)

;;; module-raku.el ends here
#+end_src

*** Yaml

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-yaml.el
;;; module-yaml.el --- Config for Yaml

(use-package yaml-mode
             :mode "\\.yml\\'")

(provide 'module-yaml)
;;; module-yaml.el ends here
#+end_src

*** PHP

#+name: module-php
#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-php.el
;;; module-php.el --- Config for PHP

(eval-when-compile
 (require 'use-package))

(use-package php-mode)

(provide 'module-php)
;;; module-php.el ends here
#+end_src

** Block 5 - magit
*** magit

https://magit.vc/

Magit is a complete text-based user interface to Git.
It fills the glaring gap between the Git command-line interface and various GUIs,
letting you perform trivial as well as elaborate version control tasks with just
a couple of mnemonic key presses.

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-magit.el
;;; module-magit.el --- Config for magitc

(use-package magit
  :defer 1
  :bind ("C-5" . magit-status))

(provide 'module-magit)

;;; module-magit.el ends here
#+end_src

** Block 6 - syntax checking
*** flycheck

#+begin_src emacs-lisp :tangle ~/.emacs.d/modules/module-flycheck.el
;;; module-flycheck.el -- Config for flycheck

(use-package flycheck
  :hook (after-init . global-flycheck-mode)
  :config
  (use-package flycheck-pos-tip))

(provide 'module-flycheck)
;;; module-flycheck.el ends here
#+end_src

** Block 7 - functions
*** functions

#+name: functions
#+begin_src emacs-lisp
(defun close-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list))
  (delete-other-windows))

(defun open-shell (path name)
  (dired path)
  (shell)
  (rename-buffer name))
#+end_src

*** private functions

#+name: private-functions
#+begin_src emacs-lisp
(load-file "~/.emacs.d/private-functions.el")
#+end_src

* init.el

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :noweb yes :main no
;;; init.el -*- lexical-binding: t; -*-

<<gc-tricks>>

<<package>>

;; Block 1 - main view & preferences for it

(require 'module-use-package)
(require 'module-theme)
(require 'module-theme-settings)
(require 'module-customize)
(require 'module-ui-settings)
(require 'module-doom-modeline)
(require 'module-menu)
(require 'module-exec-path-from-shell)
(require 'module-settings)
(require 'module-registers)


;; Block 2 - orgmode

(require 'module-org)
(require 'module-agenda)


;; Block 3 - other packages & preferences

(require 'module-paren)
(require 'module-rainbow-delimiters)
(require 'module-restart-emacs)
(require 'module-neotree)
(require 'module-vterm)
(require 'module-writeroom)
(require 'module-windmove)
(require 'module-google-translate)
(require 'module-which-key)
(require 'module-crux)
(require 'module-yasnippet)
(require 'module-esup)
(require 'module-emms)
(require 'module-all-the-icons)
(require 'module-ivy)
(require 'module-company)
(require 'module-security)
(require 'module-smartparens)
(require 'module-org-redmine)
(require 'module-dash-at-point)


;; Block 4 - languages

(require 'module-lisp)
(require 'module-javascript)
(require 'module-clojure)
;; (require 'module-scss)
;; (require 'module-dart)
;; (require 'module-prolog)
;; (require 'module-raku)
;; (require 'module-yaml)
;; (require 'module-php)
;; (require 'module-plantuml)


;; Block 5 - magit

(require 'module-magit)

;; Block 6 - syntax checking

(require 'module-flycheck)

;; Block 7 - functions

<<functions>>
<<private-functions>>

#+end_src
